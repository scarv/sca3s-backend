# Copyright (C) 2018 SCARV project <info@scarv.org>
#
# Use of this source code is restricted per the MIT license, a copy of which 
# can be found at https://opensource.org/licenses/MIT (or should be included 
# as LICENSE.txt within the associated archive or repository).

from sca3s import backend as be
from sca3s import spec    as spec

import itertools 

AES_ENC_SBOX = [ 0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5,
                 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
                 0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0,
                 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
                 0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC,
                 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
                 0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A,
                 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
                 0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0,
                 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
                 0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B,
                 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
                 0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85,
                 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
                 0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5,
                 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
                 0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17,
                 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
                 0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88,
                 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
                 0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C,
                 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
                 0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9,
                 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
                 0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6,
                 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
                 0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E,
                 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
                 0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94,
                 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
                 0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68,
                 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16 ]
               
AES_DEC_SBOX = [ 0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38,
                 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
                 0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87,
                 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
                 0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D,
                 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
                 0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2,
                 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
                 0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16,
                 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
                 0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA,
                 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
                 0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A,
                 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
                 0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02,
                 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
                 0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA,
                 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
                 0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85,
                 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
                 0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89,
                 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
                 0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20,
                 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
                 0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31,
                 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
                 0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D,
                 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
                 0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0,
                 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
                 0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26,
                 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D ]

AES_MULX     = [ 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0E, 
                 0x10, 0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x1E,   
                 0x20, 0x22, 0x24, 0x26, 0x28, 0x2A, 0x2C, 0x2E, 
                 0x30, 0x32, 0x34, 0x36, 0x38, 0x3A, 0x3C, 0x3E,   
                 0x40, 0x42, 0x44, 0x46, 0x48, 0x4A, 0x4C, 0x4E, 
                 0x50, 0x52, 0x54, 0x56, 0x58, 0x5A, 0x5C, 0x5E,   
                 0x60, 0x62, 0x64, 0x66, 0x68, 0x6A, 0x6C, 0x6E, 
                 0x70, 0x72, 0x74, 0x76, 0x78, 0x7A, 0x7C, 0x7E,   
                 0x80, 0x82, 0x84, 0x86, 0x88, 0x8A, 0x8C, 0x8E, 
                 0x90, 0x92, 0x94, 0x96, 0x98, 0x9A, 0x9C, 0x9E,   
                 0xA0, 0xA2, 0xA4, 0xA6, 0xA8, 0xAA, 0xAC, 0xAE, 
                 0xB0, 0xB2, 0xB4, 0xB6, 0xB8, 0xBA, 0xBC, 0xBE,   
                 0xC0, 0xC2, 0xC4, 0xC6, 0xC8, 0xCA, 0xCC, 0xCE, 
                 0xD0, 0xD2, 0xD4, 0xD6, 0xD8, 0xDA, 0xDC, 0xDE,   
                 0xE0, 0xE2, 0xE4, 0xE6, 0xE8, 0xEA, 0xEC, 0xEE, 
                 0xF0, 0xF2, 0xF4, 0xF6, 0xF8, 0xFA, 0xFC, 0xFE,   
                 0x1B, 0x19, 0x1F, 0x1D, 0x13, 0x11, 0x17, 0x15, 
                 0x0B, 0x09, 0x0F, 0x0D, 0x03, 0x01, 0x07, 0x05,   
                 0x3B, 0x39, 0x3F, 0x3D, 0x33, 0x31, 0x37, 0x35, 
                 0x2B, 0x29, 0x2F, 0x2D, 0x23, 0x21, 0x27, 0x25,   
                 0x5B, 0x59, 0x5F, 0x5D, 0x53, 0x51, 0x57, 0x55, 
                 0x4B, 0x49, 0x4F, 0x4D, 0x43, 0x41, 0x47, 0x45,   
                 0x7B, 0x79, 0x7F, 0x7D, 0x73, 0x71, 0x77, 0x75, 
                 0x6B, 0x69, 0x6F, 0x6D, 0x63, 0x61, 0x67, 0x65,   
                 0x9B, 0x99, 0x9F, 0x9D, 0x93, 0x91, 0x97, 0x95, 
                 0x8B, 0x89, 0x8F, 0x8D, 0x83, 0x81, 0x87, 0x85,   
                 0xBB, 0xB9, 0xBF, 0xBD, 0xB3, 0xB1, 0xB7, 0xB5, 
                 0xAB, 0xA9, 0xAF, 0xAD, 0xA3, 0xA1, 0xA7, 0xA5,   
                 0xDB, 0xD9, 0xDF, 0xDD, 0xD3, 0xD1, 0xD7, 0xD5, 
                 0xCB, 0xC9, 0xCF, 0xCD, 0xC3, 0xC1, 0xC7, 0xC5,   
                 0xFB, 0xF9, 0xFF, 0xFD, 0xF3, 0xF1, 0xF7, 0xF5, 
                 0xEB, 0xE9, 0xEF, 0xED, 0xE3, 0xE1, 0xE7, 0xE5 ]

AES_DIVX     = [ 0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 
                 0x04, 0x04, 0x05, 0x05, 0x06, 0x06, 0x07, 0x07, 
                 0x08, 0x08, 0x09, 0x09, 0x0A, 0x0A, 0x0B, 0x0B, 
                 0x0C, 0x0C, 0x0D, 0x80, 0x0E, 0x0E, 0x0F, 0x82, 
                 0x10, 0x10, 0x11, 0x11, 0x12, 0x12, 0x13, 0x13, 
                 0x14, 0x14, 0x15, 0x15, 0x16, 0x16, 0x17, 0x17, 
                 0x18, 0x18, 0x19, 0x19, 0x1A, 0x1A, 0x1B, 0x1B, 
                 0x1C, 0x1C, 0x1D, 0x90, 0x1E, 0x1E, 0x1F, 0x92, 
                 0x20, 0x20, 0x21, 0x21, 0x22, 0x22, 0x23, 0x23, 
                 0x24, 0x24, 0x25, 0x25, 0x26, 0x26, 0x27, 0x27, 
                 0x28, 0x28, 0x29, 0x29, 0x2A, 0x2A, 0x2B, 0x2B, 
                 0x2C, 0x2C, 0x2D, 0xA0, 0x2E, 0x2E, 0x2F, 0xA2, 
                 0x30, 0x30, 0x31, 0x31, 0x32, 0x32, 0x33, 0x33, 
                 0x34, 0x34, 0x35, 0x35, 0x36, 0x36, 0x37, 0x37, 
                 0x38, 0x38, 0x39, 0x39, 0x3A, 0x3A, 0x3B, 0x3B, 
                 0x3C, 0x3C, 0x3D, 0xB0, 0x3E, 0x3E, 0x3F, 0xB2, 
                 0x40, 0x40, 0x41, 0x41, 0x42, 0x42, 0x43, 0x43, 
                 0x44, 0x44, 0x45, 0x45, 0x46, 0x46, 0x47, 0x47, 
                 0x48, 0x48, 0x49, 0x49, 0x4A, 0x4A, 0x4B, 0x4B, 
                 0x4C, 0x4C, 0x4D, 0xC0, 0x4E, 0x4E, 0x4F, 0xC2, 
                 0x50, 0x50, 0x51, 0x51, 0x52, 0x52, 0x53, 0x53, 
                 0x54, 0x54, 0x55, 0x55, 0x56, 0x56, 0x57, 0x57, 
                 0x58, 0x58, 0x59, 0x59, 0x5A, 0x5A, 0x5B, 0x5B, 
                 0x5C, 0x5C, 0x5D, 0xD0, 0x5E, 0x5E, 0x5F, 0xD2, 
                 0x60, 0x60, 0x61, 0x61, 0x62, 0x62, 0x63, 0x63, 
                 0x64, 0x64, 0x65, 0x65, 0x66, 0x66, 0x67, 0x67, 
                 0x68, 0x68, 0x69, 0x69, 0x6A, 0x6A, 0x6B, 0x6B, 
                 0x6C, 0x6C, 0x6D, 0xE0, 0x6E, 0x6E, 0x6F, 0xE2, 
                 0x70, 0x70, 0x71, 0x71, 0x72, 0x72, 0x73, 0x73, 
                 0x74, 0x74, 0x75, 0x75, 0x76, 0x76, 0x77, 0x77, 
                 0x78, 0x78, 0x79, 0x79, 0x7A, 0x7A, 0x7B, 0x7B, 
                 0x7C, 0x7C, 0x7D, 0xF0, 0x7E, 0x7E, 0x7F, 0xF2 ]

AES_RCON     = [ 0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 
                 0x80, 0x1B, 0x36 ]
class AES( object ) :
  def __init__( self, k ) :
    super().__init__()

    if   ( len( k ) == 16 ) :
      self.Nb = 4 ; self.Nk = 4 ; self.Nr = 10
    elif ( len( k ) == 24 ) :
      self.Nb = 4 ; self.Nk = 6 ; self.Nr = 12
    elif ( len( k ) == 32 ) :
      self.Nb = 4 ; self.Nk = 8 ; self.Nr = 14

    self.rk = self._exp( k )

  def _enc_key( self, s, rk ) :
    for i in range( 4 * self.Nb ) :
      s[ i ] = s[ i ] ^ rk[ i ]
  
  def _enc_sub( self, s ) :
    for i in range( 4 * self.Nb ) :
      s[ i ] = AES_ENC_SBOX[ s[ i ] ]
  
  def _enc_row( self, s ) :
    ( s[ 13 ], s[  1 ], s[  5 ], s[  9 ] ) = ( s[  1 ], s[  5 ], s[  9 ], s[ 13 ] )
    ( s[ 10 ], s[ 14 ], s[  2 ], s[  6 ] ) = ( s[  2 ], s[  6 ], s[ 10 ], s[ 14 ] )
    ( s[  7 ], s[ 11 ], s[ 15 ], s[  3 ] ) = ( s[  3 ], s[  7 ], s[ 11 ], s[ 15 ] )
  
  def _enc_mix( self, s ) :
    def step( a, b, c, d ) :
      __a1 = s[ a ] ; __a2 = AES_MULX[ __a1 ] ; __a3 = __a1 ^ __a2
      __b1 = s[ b ] ; __b2 = AES_MULX[ __b1 ] ; __b3 = __b1 ^ __b2
      __c1 = s[ c ] ; __c2 = AES_MULX[ __c1 ] ; __c3 = __c1 ^ __c2
      __d1 = s[ d ] ; __d2 = AES_MULX[ __d1 ] ; __d3 = __d1 ^ __d2
  
      s[ a ] = __a2 ^ __b3 ^ __c1 ^ __d1
      s[ b ] = __a1 ^ __b2 ^ __c3 ^ __d1
      s[ c ] = __a1 ^ __b1 ^ __c2 ^ __d3
      s[ d ] = __a3 ^ __b1 ^ __c1 ^ __d2
  
    step(  0,  1,  2,  3 )
    step(  4,  5,  6,  7 )
    step(  8,  9, 10, 11 )
    step( 12, 13, 14, 15 )
  
  def _dec_key( self, s, rk ) :
    for i in range( 4 * self.Nb ) :
      s[ i ] = s[ i ] ^ rk[ i ]
  
  def _dec_sub( self, s ) :
    for i in range( 4 * self.Nb ) :
      s[ i ] = AES_DEC_SBOX[ s[ i ] ]
  
  def _dec_row( self, s ) :
    ( s[  5 ], s[  9 ], s[ 13 ], s[  1 ] ) = ( s[  1 ], s[  5 ], s[  9 ], s[ 13 ] )
    ( s[ 10 ], s[ 14 ], s[  2 ], s[  6 ] ) = ( s[  2 ], s[  6 ], s[ 10 ], s[ 14 ] )
    ( s[ 15 ], s[  3 ], s[  7 ], s[ 11 ] ) = ( s[  3 ], s[  7 ], s[ 11 ], s[ 15 ] )
  
  def _dec_mix( self, s ) :
    def step( a, b, c, d ) :
      __a1 = s[ a ] ; __a2 = AES_MULX[ __a1 ] ; __a4 = AES_MULX[ __a2 ] ; __a8 = AES_MULX[ __a4 ] ; __aA = __a2 ^ __a8 ; __aC = __a4 ^ __a8
      __b1 = s[ b ] ; __b2 = AES_MULX[ __b1 ] ; __b4 = AES_MULX[ __b2 ] ; __b8 = AES_MULX[ __b4 ] ; __bA = __b2 ^ __b8 ; __bC = __b4 ^ __b8
      __c1 = s[ c ] ; __c2 = AES_MULX[ __c1 ] ; __c4 = AES_MULX[ __c2 ] ; __c8 = AES_MULX[ __c4 ] ; __cA = __c2 ^ __c8 ; __cC = __c4 ^ __c8
      __d1 = s[ d ] ; __d2 = AES_MULX[ __d1 ] ; __d4 = AES_MULX[ __d2 ] ; __d8 = AES_MULX[ __d4 ] ; __dA = __d2 ^ __d8 ; __dC = __d4 ^ __d8
  
      s[ a ] = __aC ^ __a2 ^ __bA ^ __b1 ^ __cC ^ __c1 ^ __d8 ^ __d1
      s[ b ] = __a8 ^ __a1 ^ __bC ^ __b2 ^ __cA ^ __c1 ^ __dC ^ __d1
      s[ c ] = __aC ^ __a1 ^ __b8 ^ __b1 ^ __cC ^ __c2 ^ __dA ^ __d1
      s[ d ] = __aA ^ __a1 ^ __bC ^ __b1 ^ __c8 ^ __c1 ^ __dC ^ __d2
  
    step(  0,  1,  2,  3 )
    step(  4,  5,  6,  7 )
    step(  8,  9, 10, 11 )
    step( 12, 13, 14, 15 )
  
  def _exp( self, k ) :
    w = [ [ k[ 4 * i + j ] for j in range( 4 ) ] for i in range( self.Nk ) ]
  
    for i in range( self.Nk, self.Nb * ( self.Nr + 1 ) ) :
      t = [ w[ i - 1 ][ j ] for j in range( self.Nb ) ]
  
      if   (                     ( ( i % self.Nk ) == 0 ) ) :
        t = [ AES_RCON[ i // self.Nk ] ^ AES_ENC_SBOX[ t[ 1 ] ],
                                         AES_ENC_SBOX[ t[ 2 ] ],
                                         AES_ENC_SBOX[ t[ 3 ] ],
                                         AES_ENC_SBOX[ t[ 0 ] ] ]
  
      elif ( ( self.Nk > 6 ) and ( ( i % self.Nk ) == 4 ) ) :
        t = [                            AES_ENC_SBOX[ t[ 0 ] ],
                                         AES_ENC_SBOX[ t[ 1 ] ],
                                         AES_ENC_SBOX[ t[ 2 ] ],
                                         AES_ENC_SBOX[ t[ 3 ] ] ]
  
      t[ 0 ] ^= w[ i - self.Nk ][ 0 ]
      t[ 1 ] ^= w[ i - self.Nk ][ 1 ]
      t[ 2 ] ^= w[ i - self.Nk ][ 2 ]
      t[ 3 ] ^= w[ i - self.Nk ][ 3 ] ; w += [ t ]
  
    def chunks( x, n ):
      for i in range( 0, len( x ), n ):
        yield x[ i : i + n ]
  
    return list( chunks( list( itertools.chain( *w ) ), 4 * self.Nb ) )
  
  def enc( self, m ) :
    s = list( m )
  
    self._enc_key( s, self.rk[       0 ] )

    for i in range( 1, self.Nr ) :
      self._enc_sub( s )
      self._enc_row( s )
      self._enc_mix( s )
      self._enc_key( s, self.rk[           i ] )
  
    self._enc_sub( s )
    self._enc_row( s )
    self._enc_key( s, self.rk[ self.Nr ] )
  
    return bytes( s )
  
  def dec( self, c ) :
    s = list( c )
  
    self._dec_key( s, self.rk[ self.Nr ] )
  
    for i in range( 1, self.Nr ) :
      self._dec_row( s )
      self._dec_sub( s )
      self._dec_key( s, self.rk[ self.Nr - i ] )
      self._dec_mix( s )
  
    self._dec_row( s )
    self._dec_sub( s )
    self._dec_key( s, self.rk[       0 ] )
  
    return bytes( s )

  def enc_rev( self, c, r ) :
    s = list( c )

    for i in range( 1, r ) :
      self._dec_key( s, self.rk[           ( r - i ) ] )
      self._dec_mix( s )
      self._dec_row( s )
      self._dec_sub( s )

    self._dec_key( s, self.rk[ 0       ] )

    return bytes( s )

  def dec_rev( self, m, r ) :
    s = list( m )
  
    for i in range( 1, r ) :
      self._enc_mix( s )
      self._enc_key( s, self.rk[ self.Nr - ( r - i ) ] )
      self._enc_sub( s )
      self._enc_row( s )

    self._enc_key( s, self.rk[ self.Nr ] )

    return bytes( s )
